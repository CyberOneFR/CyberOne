name: Recent Activity

on:
  workflow_dispatch:
  schedule:
    # Exécuter toutes les 12 heures
    - cron: '0 */12 * * *'

jobs:
  update-recent-activity:
    name: Mise à jour des projets récents
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Get Recent Projects
        run: |
          pip install PyGithub
          cat > update_projects.py << 'EOF'
          import os
          import re
          import github
          from datetime import datetime, timedelta
          
          # Authentification
          token = os.environ['GH_TOKEN']
          g = github.Github(token)
          user = g.get_user('CyberOneFR')
          
          # Récupérer les projets récents (derniers 3 mois)
          recent_repos = []
          three_months_ago = datetime.now() - timedelta(days=90)
          
          for repo in user.get_repos():
              if not repo.fork and repo.updated_at > three_months_ago:
                  recent_repos.append({
                      'name': repo.name,
                      'url': repo.html_url,
                      'description': repo.description or "Pas de description",
                      'language': repo.language or "Non spécifié",
                      'stars': repo.stargazers_count,
                      'updated_at': repo.updated_at
                  })
          
          # Trier par date de mise à jour
          recent_repos = sorted(recent_repos, key=lambda x: x['updated_at'], reverse=True)
          
          # Créer la liste en markdown
          projects_md = "<!-- PROJETS-RECENTS-DEBUT -->\n"
          
          if recent_repos:
              for repo in recent_repos[:5]:  # Limiter à 5 projets
                  date_str = repo['updated_at'].strftime("%d/%m/%Y")
                  projects_md += f"* [{repo['name']}]({repo['url']}) - {repo['description']} `{repo['language']}` ⭐ {repo['stars']} (Mis à jour le {date_str})\n"
          else:
              projects_md += "* Aucun projet récent à afficher pour le moment.\n"
          
          projects_md += "<!-- PROJETS-RECENTS-FIN -->"
          
          # Mettre à jour le README
          with open('README.md', 'r', encoding='utf-8') as f:
              readme = f.read()
          
          pattern = r'<!-- PROJETS-RECENTS-DEBUT -->.*?<!-- PROJETS-RECENTS-FIN -->'
          new_readme = re.sub(pattern, projects_md, readme, flags=re.DOTALL)
          
          with open('README.md', 'w', encoding='utf-8') as f:
              f.write(new_readme)
          EOF
          
          python update_projects.py
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --quiet && git diff --staged --quiet || git commit -m "docs: mise à jour des projets récents"
          git push 